// Mocks generated by Mockito 5.4.4 from annotations
// in time_tracking_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:time_tracking_app/core/network_info.dart' as _i2;
import 'package:time_tracking_app/data/remote_data_source/remote_data_source.dart'
    as _i9;
import 'package:time_tracking_app/domain/entities/custom_failures.dart' as _i6;
import 'package:time_tracking_app/domain/entities/result.dart' as _i5;
import 'package:time_tracking_app/domain/entities/tasks/task_entity.dart'
    as _i7;
import 'package:time_tracking_app/domain/repository/repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void initListener() => super.noSuchMethod(
        Invocation.method(
          #initListener,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i4.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.Result<_i6.CustomFailure, bool>> addTasks(
          _i7.TaskEntity? taskEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTasks,
          [taskEntity],
        ),
        returnValue: _i3.Future<_i5.Result<_i6.CustomFailure, bool>>.value(
            _i8.dummyValue<_i5.Result<_i6.CustomFailure, bool>>(
          this,
          Invocation.method(
            #addTasks,
            [taskEntity],
          ),
        )),
      ) as _i3.Future<_i5.Result<_i6.CustomFailure, bool>>);

  @override
  _i3.Future<
      _i5.Result<_i6.CustomFailure,
          List<_i7.TaskEntity>>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3
            .Future<_i5.Result<_i6.CustomFailure, List<_i7.TaskEntity>>>.value(
            _i8.dummyValue<_i5.Result<_i6.CustomFailure, List<_i7.TaskEntity>>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i3.Future<_i5.Result<_i6.CustomFailure, List<_i7.TaskEntity>>>);

  @override
  _i3.Future<_i5.Result<_i6.CustomFailure, bool>> updateTask(
          _i7.TaskEntity? taskEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [taskEntity],
        ),
        returnValue: _i3.Future<_i5.Result<_i6.CustomFailure, bool>>.value(
            _i8.dummyValue<_i5.Result<_i6.CustomFailure, bool>>(
          this,
          Invocation.method(
            #updateTask,
            [taskEntity],
          ),
        )),
      ) as _i3.Future<_i5.Result<_i6.CustomFailure, bool>>);

  @override
  _i3.Future<_i5.Result<_i6.CustomFailure, bool>> deleteTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i3.Future<_i5.Result<_i6.CustomFailure, bool>>.value(
            _i8.dummyValue<_i5.Result<_i6.CustomFailure, bool>>(
          this,
          Invocation.method(
            #deleteTask,
            [taskId],
          ),
        )),
      ) as _i3.Future<_i5.Result<_i6.CustomFailure, bool>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i9.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> addTasks(_i7.TaskEntity? taskEntity) => (super.noSuchMethod(
        Invocation.method(
          #addTasks,
          [taskEntity],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i7.TaskEntity>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i3.Future<List<_i7.TaskEntity>>.value(<_i7.TaskEntity>[]),
      ) as _i3.Future<List<_i7.TaskEntity>>);

  @override
  _i3.Future<bool> updateTask(_i7.TaskEntity? taskEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [taskEntity],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
